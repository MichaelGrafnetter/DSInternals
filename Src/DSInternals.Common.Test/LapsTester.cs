using System;
using System.Collections.Generic;
using System.Security.AccessControl;
using System.Security.Principal;
using DSInternals.Common.Data;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace DSInternals.Common.Test
{
    [TestClass]
    public class LapsTester
    {
        [TestMethod]
        public void LAPS_Parse_Encrypted1()
        {
            byte[] rootKeyValue = "a499ffbd0685ef2a7bf1f1c0465b58f58c86f50d1c0392e19e885207f4d86acd473f1b16d945f7eafb3c113e128c222c7aecea5221c46333d2e9e0c4fa890c87".HexToBinary();
            byte[] encryptedPassword = "4a93da018e799b34e3040000000000003082044d06092a864886f70d010703a082043e3082043a02010231820406a2820402020104308203c40482036c010000004b44534b030000006a0100000b00000012000000a400018b062628a36070c5cad7cf5c0b080300001800000018000000444850420001000087a8e61db4b6663cffbbd19c651959998ceef608660dd0f25d2ceed4435e3b00e00df8f1d61957d4faf7df4561b2aa3016c3d91134096faa3bf4296d830e9a7c209e0c6497517abd5a8a9d306bcf67ed91f9e6725b4758c022e0b1ef4275bf7b6c5bfc11d45f9088b941f54eb1e59bb8bc39a0bf12307f5c4fdb70c581b23f76b63acae1caa6b7902d52526735488a0ef13c6d9a51bfa4ab3ad8347796524d8ef6a167b5a41825d967e144e5140564251ccacb83e6b486f6b3ca3f7971506026c0b857f689962856ded4010abd0be621c3a3960a54e710c375f26375d7014103a4b54330c198af126116d2276e11715f693877fad7ef09cadb094ae91e1a15973fb32c9b73134d0b2e77506660edbd484ca7b18f21ef205407f4793a1a0ba12510dbc15077be463fff4fed4aac0bb555be3a6c1b0c6b47b1bc3773bf7e8c6f62901228f8c28cbb18a55ae31341000a650196f931c77a57f2ddf463e5e9ec144b777de62aaab8a8628ac376d282d6ed3864e67982428ebc831d14348f6f2f9193b5045af2767164e1dfc967c1fb3f2e55a4bd1bffe83b9c80d052b985d182ea0adb2a3b7313d3fe14c8484b1e052588b9b7d2bbd2df016199ecd06e1557cd0915b3353bbb64e0ec377fd028370df92b52c7891428cdc67eb6184b523d1db246c32f63078490f00ef8d647d148d47954515e2327cfef98c582664b4c0f6cc41659755560a0185297824876647fd50b5520168dbac7242405539588c0e182cf02b15a2df3ffa4e6992a57520594afb1784ec4f7451b0180c7a82b9f4c5131c9ba46c77aafd6991d3a878fb28b0cf1781d779cc1f47c4688ddf60ed71c52fe9474d8fa3267b02fa5a663d2fcd9400787db5b3a144b28ff5120e52415eb22363f10c00601824cb050d6a182da4af7980ecdb43469709c61d861d0478d314ec26b14122bcef77965935c26bb17b63565355fb92218165be6825b4b30398215c981a42536b6b289dcd684439b617dd5395eb9202f7288b05caf17275d326f4bb0d656c392ed2a6e49d578e59fb77dcc94c9a1c7759b6d04ddc24daadbde61791246fc9363006f006e0074006f0073006f002e0063006f006d00000063006f006e0074006f0073006f002e0063006f006d000000305206092b0601040182374a013045060a2b0601040182374a01013037303530330c035349440c2c532d312d352d32312d3233323338363535372d333535373130303634362d333536363833373133312d353132300b060960864801650304012d042835eb278aeb28e8825a5654d1dbbe2d8ebb98724baddd993be3982d291a8691346adb13757eacbcbe302b06092a864886f70d010701301e060960864801650304012e3011040c866ebfe3e515353ffa58fb47020110b20678904e1606195cd306df5719035ea167ad209ad0ea4b975e7cbebb7341af6534ecad0d2ba8328a6ab07c1c8270d60c784b4553a658c748a40ef88bee924821755407f1283b80e16b0ec5c682d95eb99f53b8e10dd3b60710fd1afab7f0bfdd3fe5f6ef19b5ea6e87a955df0d8292ca416b08c0022ec4a4ae7f0ea95c1ac6df365525459673e4142ad227973eaaf7b08b".HexToBinary();
            string expectedPassword = "a998aoEUUXxO32";

            var encryptedLaps = new LapsEncryptedPassword(encryptedPassword);
            Assert.AreEqual(2024, encryptedLaps.UpdateTimeStamp.Year);

            var rootKey = new KdsRootKey(encryptedLaps.EncryptedBlob.ProtectionKeyIdentifier.RootKeyId, rootKeyValue);
            var rootKeys = new Dictionary<Guid, KdsRootKey>();
            rootKeys.Add(rootKey.KeyId, rootKey);

            // Try to decrypt the password
            var lapsInfo = new LapsPasswordInformation("PC01", encryptedLaps, LapsPasswordSource.EncryptedPassword, null, rootKeys);
            Assert.AreEqual(expectedPassword, lapsInfo.Password);
        }

        [TestMethod]
        public void LAPS_Parse_Encrypted2()
        {
            byte[] rootKeyValue = "77caa1cbaf637d18a082bfb07a16cf2205a3a620d800c179b5a7287f92fbbc72c1919919ebfdfcaf44340683d30415fdd82ed899549564d6399c6115b0756c7c".HexToBinary();
            byte[] encryptedPassword = "c8ccdb015d5c92e4d7040000000000003082044d06092a864886f70d010703a082043e3082043a02010231820406a2820402020104308203c40482036c010000004b44534b030000006b01000009000000100000005a415da300640817fc8a3d8f52b8b33d080300001800000018000000444850420001000087a8e61db4b6663cffbbd19c651959998ceef608660dd0f25d2ceed4435e3b00e00df8f1d61957d4faf7df4561b2aa3016c3d91134096faa3bf4296d830e9a7c209e0c6497517abd5a8a9d306bcf67ed91f9e6725b4758c022e0b1ef4275bf7b6c5bfc11d45f9088b941f54eb1e59bb8bc39a0bf12307f5c4fdb70c581b23f76b63acae1caa6b7902d52526735488a0ef13c6d9a51bfa4ab3ad8347796524d8ef6a167b5a41825d967e144e5140564251ccacb83e6b486f6b3ca3f7971506026c0b857f689962856ded4010abd0be621c3a3960a54e710c375f26375d7014103a4b54330c198af126116d2276e11715f693877fad7ef09cadb094ae91e1a15973fb32c9b73134d0b2e77506660edbd484ca7b18f21ef205407f4793a1a0ba12510dbc15077be463fff4fed4aac0bb555be3a6c1b0c6b47b1bc3773bf7e8c6f62901228f8c28cbb18a55ae31341000a650196f931c77a57f2ddf463e5e9ec144b777de62aaab8a8628ac376d282d6ed3864e67982428ebc831d14348f6f2f9193b5045af2767164e1dfc967c1fb3f2e55a4bd1bffe83b9c80d052b985d182ea0adb2a3b7313d3fe14c8484b1e052588b9b7d2bbd2df016199ecd06e1557cd0915b3353bbb64e0ec377fd028370df92b52c7891428cdc67eb6184b523d1db246c32f63078490f00ef8d647d148d47954515e2327cfef98c582664b4c0f6cc4165965351ca4a742a3c6de749c63e8cb106ba0eac48a6da29cd4d7cdc863a93013d827e6d7698f8912c9394ad94550d15ae5643b4313d18ff1c1835a66802b6eb058896671bae627811b91bc20e6c17a8920f733c7618904be1b1a3133c082698ec82d6eada10efce58632ec843c09352c6d69b91feb28640a68f48bb277dac8436a3818833564a203147a2474167610c7665e656e4f77319367c196b34d7016abc4090425d8fa7a84af46d7c6615dc1d69f13605043d7f688a23a80e30be9e91401ecfc7ad4ec54d5aea088c721913e093ac64e1ba69b9217fa28d2e400b08afd8a8109be35f2e187fc6595e28ea1ea74f3bee485d87e534ec83409375723959d3263006f006e0074006f0073006f002e0063006f006d00000063006f006e0074006f0073006f002e0063006f006d000000305206092b0601040182374a013045060a2b0601040182374a01013037303530330c035349440c2c532d312d352d32312d3236313636363235392d323736373839383533322d333732343634303738302d353132300b060960864801650304012d0428720e348b54e5b0010eeba16fd0f563eea98be51d7640ae2f262329c478ea8400b1bb8bac2702f10a302b06092a864886f70d010701301e060960864801650304012e3011040c1f18aa872a9988420dfd274c02011045b7da8704962eb199b1bc27e6f4e2369030f24c9a131e568dce5735d0df249c6ea921406701944efa29fc9ca8037fa9f68f86d6539bb3be7432677c46ff5b7cb1975fda69b3ea9df43ba52baad77f4d190eb0d534bb0894fccdd3770bd42c1b8644f29543aeeafdc59070c472a4116c5326343eee9fbe53b2a7240b025e8030042061a5950d".HexToBinary();
            string expectedPassword = "Z,E2q68}";

            var laps = new LapsEncryptedPassword(encryptedPassword);
            Assert.AreEqual(2025, laps.UpdateTimeStamp.Year);

            var rootKey = new KdsRootKey(laps.EncryptedBlob.ProtectionKeyIdentifier.RootKeyId, rootKeyValue);

            // Calculate the group keys and save them to cache
            var gke = GroupKeyEnvelope.Create(rootKey, laps.EncryptedBlob.ProtectionKeyIdentifier, laps.EncryptedBlob.TargetSid);
            gke.WriteToCache();

            var cleartextLaps = laps.Decrypt();
            Assert.AreEqual(expectedPassword, cleartextLaps.Password);
        }

        [TestMethod]
        public void LAPS_Parse_Cleartext()
        {
            byte[] binaryLapsPassword = "7b226e223a2241646d696e6973747261746f72222c2274223a22316438313631623431633431636465222c2270223a2241366133233725656221353762653461344239355a343333393462613935366465363965356438393735227d".HexToBinary();
            var rawLapsPassword = LapsClearTextPassword.Parse(new ReadOnlySpan<byte>(binaryLapsPassword), false);
            LapsPasswordInformation laps = new LapsPasswordInformation("CONTOSO-PC1", rawLapsPassword, DateTime.Now);

            Assert.AreEqual("Administrator", laps.Account);
            Assert.AreEqual("A6a3#7%eb!57be4a4B95Z43394ba956de69e5d8975", laps.Password);
            Assert.AreEqual(LapsPasswordSource.CleartextPassword, laps.Source);
            Assert.AreEqual(LapsDecryptionStatus.NotApplicable, laps.DecryptionStatus);
        }

        [TestMethod]
        public void GroupKeyEnvelope_ConvertSidToSecurityDescriptor()
        {
            // Generate a security descriptor from the given SID
            var sid = new SecurityIdentifier("S-1-5-21-232386557-3557100646-3566837131-512");
            byte[] result = GroupKeyEnvelope.ConvertSidToSecurityDescriptor(sid);

            // Parse the generated security descriptor
            var sd = new FileSecurity();
            sd.SetSecurityDescriptorBinaryForm(result, AccessControlSections.All);
            string sddl = sd.GetSecurityDescriptorSddlForm(AccessControlSections.All);

            Assert.AreEqual("O:SYG:SYD:(A;;DC;;;WD)(A;;CCDC;;;S-1-5-21-232386557-3557100646-3566837131-512)", sddl);
        }

        [TestMethod]
        public void GroupKeyEnvelope_Parse1()
        {
            string stringGroupKey = "010000004b44534b0200000069010000110000000800000071c278d72590829af6dcb8960b8ad8c5260000001e000000060000000c020000000200000008000040000000400000001800000018000000530050003800300030005f003100300038005f004300540052005f0048004d0041004300000000000000010000000e0000000000000053004800410035003100320000004400480000000c0200004448504d0001000087a8e61db4b6663cffbbd19c651959998ceef608660dd0f25d2ceed4435e3b00e00df8f1d61957d4faf7df4561b2aa3016c3d91134096faa3bf4296d830e9a7c209e0c6497517abd5a8a9d306bcf67ed91f9e6725b4758c022e0b1ef4275bf7b6c5bfc11d45f9088b941f54eb1e59bb8bc39a0bf12307f5c4fdb70c581b23f76b63acae1caa6b7902d52526735488a0ef13c6d9a51bfa4ab3ad8347796524d8ef6a167b5a41825d967e144e5140564251ccacb83e6b486f6b3ca3f7971506026c0b857f689962856ded4010abd0be621c3a3960a54e710c375f26375d7014103a4b54330c198af126116d2276e11715f693877fad7ef09cadb094ae91e1a15973fb32c9b73134d0b2e77506660edbd484ca7b18f21ef205407f4793a1a0ba12510dbc15077be463fff4fed4aac0bb555be3a6c1b0c6b47b1bc3773bf7e8c6f62901228f8c28cbb18a55ae31341000a650196f931c77a57f2ddf463e5e9ec144b777de62aaab8a8628ac376d282d6ed3864e67982428ebc831d14348f6f2f9193b5045af2767164e1dfc967c1fb3f2e55a4bd1bffe83b9c80d052b985d182ea0adb2a3b7313d3fe14c8484b1e052588b9b7d2bbd2df016199ecd06e1557cd0915b3353bbb64e0ec377fd028370df92b52c7891428cdc67eb6184b523d1db246c32f63078490f00ef8d647d148d47954515e2327cfef98c582664b4c0f6cc4165964006f006d00610069006e002e007400650073007400000064006f006d00610069006e002e00740065007300740000009c8f0385d746062afb90ba9d023a3a5c242eb5334341befadc49e27a908fc3393bac401456a8656104c872d0c996aa259a954bf5a38b8d6ec7cdbac1359e5a091bac68a1a7c8b9ac944c8eb1ea396cc366685e17a4110a1fb55e7c4411a6faa58f8e5be12524fabbc344c59beaf9b3ece218ea8e4f811b6cafea4b77e7ef0aed";

            // Deserialize
            var gke = new GroupKeyEnvelope(stringGroupKey.HexToBinary());
            Assert.AreEqual("domain.test", gke.DomainName);
            Assert.AreEqual("domain.test", gke.ForestName);
            Assert.AreEqual("SP800_108_CTR_HMAC", gke.KeyDerivationAlgorithm);
            Assert.AreEqual("DH", gke.SecretAgreementAlgorithm);

            // Serialize
            byte[] serialized = gke.ToByteArray();
            Assert.AreEqual(stringGroupKey, serialized.ToHex(false));
        }
    }
}
