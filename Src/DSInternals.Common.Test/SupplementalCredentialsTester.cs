using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using DSInternals.Common.Data;
using DSInternals.Common.Cryptography;

namespace DSInternals.Common.Test
{
    [TestClass]
    public class SupplementalCredentialsTester
    {
        [TestMethod]
        public void SupplementalCredentials_Parse_ADAM()
        {
            // AD LDS / ADAM has a slightly different structure of supplemental credentials
            byte[] input = "0100000001000000e80100000600000001000000e00100003100011d000000000000000000000000af4156909297baece4e553b731d9d552da58c12e5880cad54a3f909c07b0792eec9d262783c811ad9cc7aeb1ab019fe0af4156909297baece4e553b731d9d552af4156909297baece4e553b731d9d552ec9d262783c811ad9cc7aeb1ab019fe0da58c12e5880cad54a3f909c07b0792e95e11e920c7405ca6639d932888cc11c53d9e953141b322f29eb1a02798c299042eea90067734b2a81abbc79618cc1519d9aac28e63107a495266e755f7a2babac6b5dfb3bfa3b7039058310d5b36ccc7c97824dd59b9a6a053b5fae3d8603f20a5e2bc3111c759efb3a91e3740633e83b12daad09e83cb92477ac59993c5a843b12daad09e83cb92477ac59993c5a843b12daad09e83cb92477ac59993c5a8471e7228faba51df979beef06b34f791820aa1475f40540f0db59f9d2d93fc3da5f88f6d82d185741a82c7fa79e801c6d8eae592a0ce55271a17de0b39cf1e5e9923354fb99887724cf2b10e88108776b427804b8a6d6ed92c11ecb94e40da72c0c997bc1906b1f0092d61bd0efee428b0c997bc1906b1f0092d61bd0efee428b0c997bc1906b1f0092d61bd0efee428bd93e9a9a7452dff036a67a5d5d333d7c4effe21b0afc142382943ef26024649aaa6a6a95c237f2b8efa2f13ecb0cb220".HexToBinary();
            throw new AssertInconclusiveException("ADAM SupplementalCredentials parser is not yet implemented.");
            var result = new SupplementalCredentials(input);
        }

        [TestMethod]
        public void SupplementalCredentials_Parse_Null()
        {
            byte[] input = null;
            var result = new SupplementalCredentials(input);
        }

        [TestMethod]
        public void SupplementalCredentials_Parse_Empty1()
        {
            // Test 13B empty structure
            byte[] input = "00000000000000000000000000".HexToBinary();
            var result = new SupplementalCredentials(input);
        }

        [TestMethod]
        public void SupplementalCredentials_Parse_Empty2()
        {
            // Test 111B empty structure
            byte[] emptyCredentials = "000000006200000000000000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000500000".HexToBinary();
            var result = new SupplementalCredentials(emptyCredentials);
        }

        [TestMethod]
        public void SupplementalCredentials_Create_Empty()
        {
            var result = new SupplementalCredentials();
            string emptyCredentials = "000000006200000000000000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000500000";
            Assert.AreEqual(emptyCredentials, result.ToByteArray().ToHex());
        }

        [TestMethod]
        public void SupplementalCredentials_Parse_W2k16_Vector1()
        {
            byte[] blob = "00000000780a000000000000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000500005003200200001005000720069006d006100720079003a004e0054004c004d002d005300740072006f006e0067002d004e0054004f005700460039303534356562346361653431363336386630313965353965373765383535313600980301005000720069006d006100720079003a004b00650072006200650072006f0073002d004e0065007700650072002d004bf00001005000720069006d006100720079003a004b00650072006200650072006f0073003033303030303030303130303031303031633030316330303463303030303030303030303030303030303030303030303033303030303030303830303030303036383030303030303030303030303030303030303030303030333030303030303038303030303030373030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030343130303434303034313030353430303535303034643030326530303433303034663030346430303734303036353030373330303734303034353338323064613833623664363461343533383230646138336236643634611000d80002005000610063006b0061006700650073003465303035343030346330303464303032643030353330303734303037323030366630303665303036373030326430303465303035343030346630303537303034363030303030303462303036353030373230303632303036353030373230303666303037333030326430303465303036353030373730303635303037323030326430303462303036353030373930303733303030303030346230303635303037323030363230303635303037323030366630303733303030303030353730303434303036393030363730303635303037333030373430301e00c00301005000720069006d006100720079003aexToBinary();
            var credentials = new SupplementalCredentials(blob);
            byte[] blob2 = credentials.ToByteArray();
            Assert.AreEqual(blob.Length, blob2.Length);
            Assert.AreEqual(blob.ToHex(), blob2.ToHex());
        }

        [TestMethod]
        public void SupplementalCredentials_Parse_W2k16_Vector2()
        {
            byte[] blob = "000000005008000000000000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000500005003200200001005000720069006d006100720079003a004e0054004c004d002d005300740072006f006e0067002d004e0054004f005700460031643638373531326339333534646365653233376665613930643139356363373600a00101005000720069006d006100720079003a004b00650072006200650072006f0073002d004e0065007700650072002d004bc00001005000720069006d006100720079003a004b00650072006200650072006f0073003033303030303030303130303030303032303030323030303338303030303030303030303030303030303030303030303033303030303030303830303030303035383030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303034313030343430303431303035343030353530303464303032653030343330303466303034643030373530303733303036353030373230303330303033323030313366386664333764353537613430311000d80002005000610063006b0061006700650073003465303035343030346330303464303032643030353330303734303037323030366630303665303036373030326430303465303035343030346630303537303034363030303030303462303036353030373230303632303036353030373230303666303037333030326430303465303036353030373730303635303037323030326430303462303036353030373930303733303030303030346230303635303037323030363230303635303037323030366630303733303030303030353730303434303036393030363730303635303037333030373430301e00c00301005000720069006d006100720079003a00570044006900670065007300740033313030303131643030303030303030303030303030303030303030303030303963333836656664383134663734396365653066326139653665643765633633326438343535393963346266623533333732303730623362666132646339323235633063353839333430356536353138333432323132663864393564363837643963333836656664383134663734396365653066326139653665643765633633326438343535393963346266623533333732303730623362666132646339323238353037393131323334326532363433303162636566643232376536663166663963333836656664383134663734396365653066326139653665643765633633323338383064366134316161336163333730313565383262653066623033363063633634383439353232643735313239303264653236313230303431303230623934666234646333646230386133663935343731366436643264366563363062633333393036653139623034323263376638366463363866326536356165323863633634383439353232643735313239303264653236313230303431303230623536663030336262343532616633666634643163373464363464643035363139633333393036653139623034323263376638366463363866326536356165323861666437346463366633376132373732663038396364636166326436663961626366333139366136383137313439363066366463393237646137363864666263323237386336656533643064336438613261343635336666306562396630623039333962666432656338623131656262386531326563636363613766356131393538613934613463326134633262343839373230313831346235626238666230363763663335336665636232343335356466353538653837626534353432386261336634346233613037346334666364636261623934653635303533363166376133663434623361303734633466636463626162393465363530353336316637393265633665646235336238366139326634363965326339336433356135616430633331313966636536386133653331353134323131363739366531396638353462333938616139326536663633333163353630633662633939333264386436363163316136653930373937306434313662353538626563366164373736383937653439356362306334376130356661646130626638656362656130316634333965356436353337383164343366323734346535343838663762623762323838633066623339303139343864393837303766316161653436346165643563343001".HexToBinary();
            var credentials = new SupplementalCredentials(blob);
            byte[] blob2 = credentials.ToByteArray();
            Assert.AreEqual(blob.Length, blob2.Length);
            Assert.AreEqual(blob.ToHex(), blob2.ToHex());
        }

        [TestMethod]
        public void SupplementalCredentials_Parse_W2k16_Vector3()
        {
            byte[] blob = "000000008809000000000000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000500005003200200001005000720069006d006100720079003a004e0054004c004d002d005300740072006f006e0067002d004e0054004f005700460064626533343361626337656632643162313166366136643537666437393636383600a00201005000720069006d006100720079003a004b00650072006200650072006f0073002d004e0065007700650072002d004bf80001005000720069006d006100720079003a004b00650072006200650072006fd80002005000610063006b0061006700650073003465303035343030346330303464303032643030353330303734303037323030366630303665303036373030326430303465303035343030346630303537303034363030303030303462303036353030373230303632303036353030373230303666303037333030326430303465303036353030373730303635303037323030326430303462303036353030373930303733303030303030346230303635303037323030363230303635303037323030366630303733303030303030353730303434303036393030363730303635303037333030373430301e00c00301005000720069006d006100720079003aexToBinary();
            var credentials = new SupplementalCredentials(blob);
            byte[] blob2 = credentials.ToByteArray();
            Assert.AreEqual(blob.Length, blob2.Length);
            Assert.AreEqual(blob.ToHex(), blob2.ToHex());
        }

        [TestMethod]
        public void SupplementalCredentials_Parse_W2k16_Vector4()
        {
            byte[] blob = "00000000880a000000000000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000500005003200200001005000720069006d006100720079003a004e0054004c004d002d005300740072006f006e0067002d004e0054004f005700460064613664376662373363666261323738336233323836333563303130613163343600a00301005000720069006d006100720079003a004b00650072006200650072006f0073002d004e0065007700650072002d004bf80001005000720069006d006100720079003a004b00650072006200650072006f00730030333030303030303031303030313030323030303230303034633030303030303030303030303030303030303030303030333030303030303038303030303030366330303030303030303030303030303030303030303030303330303030303030383030303030303734303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303431303034343030343130303534303035353030346430303265303034333030346630303464303037353030373330303635303037323030333030303334303063383662333133626263383962356631303137333065643930373634353135651000d80002005000610063006b0061006700650073003465303035343030346330303464303032643030353330303734303037323030366630303665303036373030326430303465303035343030346630303537303034363030303030303462303036353030373230303632303036353030373230303666303037333030326430303465303036353030373730303635303037323030326430303462303036353030373930303733303030303030346230303635303037323030363230303635303037323030366630303733303030303030353730303434303036393030363730303635303037333030373430301e00c00301005000720069006d006100720079003aexToBinary();
            var credentials = new SupplementalCredentials(blob);
            byte[] blob2 = credentials.ToByteArray();
            Assert.AreEqual(blob.Length, blob2.Length);
            Assert.AreEqual(blob.ToHex(), blob2.ToHex());
        }

        [TestMethod]
        public void SupplementalCredentials_Parse_W2k16_Vector5()
        {
            byte[] blob = "00000000b00a000000000000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000500004003600e00301005000720069006d006100720079003a004b00650072006200650072006f0073002d004e0065007700650072002d004bd006100720079003a004b00650072006200650072006fd80002005000610063006b0061006700650073003465303035343030346330303464303032643030353330303734303037323030366630303665303036373030326430303465303035343030346630303537303034363030303030303462303036353030373230303632303036353030373230303666303037333030326430303465303036353030373730303635303037323030326430303462303036353030373930303733303030303030346230303635303037323030363230303635303037323030366630303733303030303030353730303434303036393030363730303635303037333030373430301e00c00301005000720069006d006100720079003aexToBinary();
            var credentials = new SupplementalCredentials(blob);
            byte[] blob2 = credentials.ToByteArray();
            // Note that we do not test the serialized value for equality, because unlike Windows Server 2016, our implementation does not put the NTLM-Strong-NTOWF property name to the Properties list if this package is not actually present.
        }

        [TestMethod]
        public void SupplementalCredentials_Parse_W2k3_Vector1()
        {
            byte[] blob = "000000000406000000000000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000500003002000400101005000720069006d006100720079003a004b00650072006200650072006fb006100670065007300346230303635303037323030363230303635303037323030366630303733303030303030353730303434303036393030363730303635303037333030373430301e00c00301005000720069006d006100720079003aexToBinary();
            var credentials = new SupplementalCredentials(blob);
            byte[] blob2 = credentials.ToByteArray();
            // Note that we do not test the serialized value for equality, because Windows Server 2003 uses different credential paddings.
        }

        [TestMethod]
        public void SupplementalCredentials_Parse_W2k3_Vector2()
        {
            byte[] blob = "00000000a806000000000000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000500003002000e40101005000720069006d006100720079003a004b00650072006200650072006fb006100670065007300346230303635303037323030363230303635303037323030366630303733303030303030353730303434303036393030363730303635303037333030373430301e00c00301005000720069006d006100720079003aexToBinary();
            var credentials = new SupplementalCredentials(blob);
            byte[] blob2 = credentials.ToByteArray();
            // Note that we do not test the serialized value for equality, because Windows Server 2003 uses different credential paddings.
        }

        [TestMethod]
        public void SupplementalCredentials_Generate1()
        {
            var credentials = new SupplementalCredentials(@"Pa$$w0rd".ToSecureString(), "Administrator", "Administrator@Adatum.com", "ADATUM", "Adatum.com");
            byte[] blob = credentials.ToByteArray();
            var credentials2 = new SupplementalCredentials(blob);

            // Test integrity
            Assert.AreEqual(credentials2.ClearText, credentials.ClearText);
            Assert.AreEqual(credentials2.NTLMStrongHash.Length, credentials.NTLMStrongHash.Length);

            // Test WDigest
            Assert.AreEqual(credentials2.WDigest.Length, credentials.WDigest.Length);
            Assert.AreEqual(credentials2.WDigest[0].ToHex(), credentials.WDigest[0].ToHex());

            // Test Kerberos
            Assert.AreEqual(credentials2.Kerberos.DefaultSalt, credentials.Kerberos.DefaultSalt);
            Assert.AreEqual(credentials2.Kerberos.Credentials[0].KeyType, credentials.Kerberos.Credentials[0].KeyType);

            // Test key serialization
            Assert.AreEqual(credentials2.Kerberos.ToByteArray().ToHex(), credentials.Kerberos.ToByteArray().ToHex());
            Assert.AreEqual(credentials2.KerberosNew.ToByteArray().ToHex(), credentials.KerberosNew.ToByteArray().ToHex());
        }

        [TestMethod]
        public void SupplementalCredentials_Generate2()
        {
            var credentials = new SupplementalCredentials(@"Pa$$w0rd".ToSecureString(), "user02", null, "ADATUM", "Adatum.com");
            byte[] blob = credentials.ToByteArray();

            byte[] expectedBlob = "000000005008000000000000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000500005003200200001005000720069006d006100720079003a004e0054004c004d002d005300740072006f006e0067002d004e0054004f005700460031643638373531326339333534646365653233376665613930643139356363373600a00101005000720069006d006100720079003a004b00650072006200650072006f0073002d004e0065007700650072002d004bc00001005000720069006d006100720079003a004b00650072006200650072006f0073003033303030303030303130303030303032303030323030303338303030303030303030303030303030303030303030303033303030303030303830303030303035383030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303034313030343430303431303035343030353530303464303032653030343330303466303034643030373530303733303036353030373230303330303033323030313366386664333764353537613430311000d80002005000610063006b0061006700650073003465303035343030346330303464303032643030353330303734303037323030366630303665303036373030326430303465303035343030346630303537303034363030303030303462303036353030373230303632303036353030373230303666303037333030326430303465303036353030373730303635303037323030326430303462303036353030373930303733303030303030346230303635303037323030363230303635303037323030366630303733303030303030353730303434303036393030363730303635303037333030373430301e00c00301005000720069006d006100720079003a00570044006900670065007300740033313030303131643030303030303030303030303030303030303030303030303963333836656664383134663734396365653066326139653665643765633633326438343535393963346266623533333732303730623362666132646339323235633063353839333430356536353138333432323132663864393564363837643963333836656664383134663734396365653066326139653665643765633633326438343535393963346266623533333732303730623362666132646339323238353037393131323334326532363433303162636566643232376536663166663963333836656664383134663734396365653066326139653665643765633633323338383064366134316161336163333730313565383262653066623033363063633634383439353232643735313239303264653236313230303431303230623934666234646333646230386133663935343731366436643264366563363062633333393036653139623034323263376638366463363866326536356165323863633634383439353232643735313239303264653236313230303431303230623536663030336262343532616633666634643163373464363464643035363139633333393036653139623034323263376638366463363866326536356165323861666437346463366633376132373732663038396364636166326436663961626366333139366136383137313439363066366463393237646137363864666263323237386336656533643064336438613261343635336666306562396630623039333962666432656338623131656262386531326563636363613766356131393538613934613463326134633262343839373230313831346235626238666230363763663335336665636232343335356466353538653837626534353432386261336634346233613037346334666364636261623934653635303533363166376133663434623361303734633466636463626162393465363530353336316637393265633665646235336238366139326634363965326339336433356135616430633331313966636536386133653331353134323131363739366531396638353462333938616139326536663633333163353630633662633939333264386436363163316136653930373937306434313662353538626563366164373736383937653439356362306334376130356661646130626638656362656130316634333965356436353337383164343366323734346535343838663762623762323838633066623339303139343864393837303766316161653436346165643563343001".HexToBinary();
            var expectedCredentials = new SupplementalCredentials(expectedBlob);

            // Test integrity
            Assert.AreEqual(expectedCredentials.ClearText, credentials.ClearText);
            Assert.AreEqual(expectedCredentials.NTLMStrongHash.Length, credentials.NTLMStrongHash.Length);
            Assert.AreEqual(WDigestHash.Encode(expectedCredentials.WDigest).ToHex(), WDigestHash.Encode(credentials.WDigest).ToHex());
            Assert.AreEqual(expectedCredentials.Kerberos.ToByteArray().ToHex(), credentials.Kerberos.ToByteArray().ToHex());
            Assert.AreEqual(expectedCredentials.KerberosNew.ToByteArray().ToHex(), credentials.KerberosNew.ToByteArray().ToHex());
        }
    }
}
